trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: CmdLine@2
  displayName: VC - Install Veracode Auth
  inputs:
    script: |
      pip install veracode-api-signing
- task: CmdLine@2
  displayName: VC - Apply Creds
  inputs:
    script: |
      echo [default] >> credentials.txt
      echo veracode_api_key_id = $(VERACODE_API_KEY_ID) >> credentials.txt
      echo veracode_api_key_secret = $(VERACODE_API_KEY_SECRET) >> credentials.txt
      mkdir c:\Users\VssAdministrator\.veracode
      cp credentials.txt c:\Users\VssAdministrator\.veracode\credentials
#Submit DAST Scan to Veracode
- task: PythonScript@0
  displayName: VC - kick off DAST scan
  inputs:
    scriptSource: 'inline'
    script: |
        import sys
        import json
        import requests
        from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC

        api_base = "https://api.veracode.com/was/configservice/v1"
        headers = {"User-Agent": "Start DA Scan Example", 'Content-type': 'application/json'}

        #Payload for updating schedule of existing DA job to start now
        data =   { 
            "schedule": 
                {       
                    "now": True,
                    "duration": 
                        {
                        "length": 1,
                        "unit": "DAY"
                        }
                }
        }
        if __name__ == "__main__":
            print("Looking for Dynamic Analysis Job: " + $(SCAN_NAME) )
            res = requests.get(api_base + "/analyses", auth=RequestsAuthPluginVeracodeHMAC(), query=("name=" + $(SCAN_NAME)), header=headers)
            response = res.json()
            try:
                job_id = response['_embedded']['analyses'][0]['analysis_id']
            except: 
                print("Could not find Dynamic Analysis")
                sys.exit(1)

            try:
                res = requests.PUT(api_base + "/analyses/" + job_id + '?method=PATCH', json=data)
                if res.status_code == 204:
                    print("Scan Submitted Successfully: " + str(res.status_code) )
                else:
                    response = res.json()
                    print("Error encountered: " + response['_embedded']['errors'][0]['detail'])
            except:
                print("Error executing API Call")
                sys.exit(1)

